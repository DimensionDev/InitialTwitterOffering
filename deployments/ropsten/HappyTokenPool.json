{
  "address": "0x0E3A736BC6Ea7cd236F74d7CC0a94e55f288e7c4",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "claimer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "to_value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token_address",
          "type": "address"
        }
      ],
      "name": "ClaimSuccess",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token_address",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "remaining_balance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint128[]",
          "name": "exchanged_values",
          "type": "uint128[]"
        }
      ],
      "name": "DestructSuccess",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "total",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "creation_time",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token_address",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "message",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint128[]",
          "name": "ratios",
          "type": "uint128[]"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "qualification",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "limit",
          "type": "uint256"
        }
      ],
      "name": "FillSuccess",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "swapper",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "from_address",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to_address",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "from_value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "to_value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "input_total",
          "type": "uint128"
        }
      ],
      "name": "SwapSuccess",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token_address",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "withdraw_balance",
          "type": "uint256"
        }
      ],
      "name": "WithdrawSuccess",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "check_availability",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "exchange_addrs",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "remaining",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "started",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "expired",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "unlocked",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "unlock_time",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "swapped",
          "type": "uint256"
        },
        {
          "internalType": "uint128[]",
          "name": "exchanged_tokens",
          "type": "uint128[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "ito_ids",
          "type": "bytes32[]"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "destruct",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_hash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_end",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "message",
          "type": "string"
        },
        {
          "internalType": "address[]",
          "name": "_exchange_addrs",
          "type": "address[]"
        },
        {
          "internalType": "uint128[]",
          "name": "_ratios",
          "type": "uint128[]"
        },
        {
          "internalType": "uint256",
          "name": "_unlock_time",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_token_addr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_total_tokens",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_limit",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_qualification",
          "type": "address"
        }
      ],
      "name": "fill_pool",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_unlock_time",
          "type": "uint256"
        }
      ],
      "name": "setUnlockTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_id",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "verification",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "validation",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "exchange_addr_i",
          "type": "uint256"
        },
        {
          "internalType": "uint128",
          "name": "_input_total",
          "type": "uint128"
        }
      ],
      "name": "swap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "swapped",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "addr_i",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x87bbe87d0c705770e1ed1c44cca5ee67d169e05fadcea6c251bae6a95a7857b9",
  "receipt": {
    "to": null,
    "from": "0x149a05Ca0589311f3eAA4F2FBE12aA5761745223",
    "contractAddress": "0x0E3A736BC6Ea7cd236F74d7CC0a94e55f288e7c4",
    "transactionIndex": 3,
    "gasUsed": "2695770",
    "logsBloom": "0x
    "blockHash": "0x35f7dbd07b9e6040a5573dcd9921c832de79fc8a8c649b0d99749de4faad0f18",
    "transactionHash": "0x87bbe87d0c705770e1ed1c44cca5ee67d169e05fadcea6c251bae6a95a7857b9",
    "logs": [],
    "blockNumber": 10457072,
    "cumulativeGasUsed": "2987214",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "790f3fdc85fd3e97f38de9c4e03af28b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"to_value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token_address\",\"type\":\"address\"}],\"name\":\"ClaimSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remaining_balance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint128[]\",\"name\":\"exchanged_values\",\"type\":\"uint128[]\"}],\"name\":\"DestructSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"creation_time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint128[]\",\"name\":\"ratios\",\"type\":\"uint128[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"qualification\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"FillSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"swapper\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"from_value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"to_value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"input_total\",\"type\":\"uint128\"}],\"name\":\"SwapSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdraw_balance\",\"type\":\"uint256\"}],\"name\":\"WithdrawSuccess\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"check_availability\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"exchange_addrs\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"started\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"expired\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"unlocked\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"unlock_time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapped\",\"type\":\"uint256\"},{\"internalType\":\"uint128[]\",\"name\":\"exchanged_tokens\",\"type\":\"uint128[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"ito_ids\",\"type\":\"bytes32[]\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"destruct\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_end\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"_exchange_addrs\",\"type\":\"address[]\"},{\"internalType\":\"uint128[]\",\"name\":\"_ratios\",\"type\":\"uint128[]\"},{\"internalType\":\"uint256\",\"name\":\"_unlock_time\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_total_tokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_qualification\",\"type\":\"address\"}],\"name\":\"fill_pool\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_unlock_time\",\"type\":\"uint256\"}],\"name\":\"setUnlockTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"verification\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"validation\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"exchange_addr_i\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"_input_total\",\"type\":\"uint128\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"swapped\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"addr_i\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"fill_pool(bytes32,uint256,uint256,string,address[],uint128[],uint256,address,uint256,uint256,address)\":{\"details\":\" fill_pool() creates a swap pool with specific parameters from input _hash                sha3-256(password) _start               start time delta, real start time = base_time + _start _end                 end time delta, real end time = base_time + _end message              swap pool creation message, only stored in FillSuccess event _exchange_addrs      swap token list (0x0 for ETH, only supports ETH and ERC20 now) _ratios              swap pair ratio list _unlock_time         unlock time delta real unlock time = base_time + _unlock_time _token_addr          swap target token address _total_tokens        target token total swap amount _limit               target token single swap limit _qualification       the qualification contract address based on IQLF to determine qualification This function takes the above parameters and creates the pool. _total_tokens of the target token will be successfully transferred to this contract securely on a successful run of this function.*\"},\"swap(bytes32,bytes32,bytes32,uint256,uint128)\":{\"details\":\"swap() allows users to swap tokens in a swap pool id                   swap pool id verification         sha3-256(sha3-256(password)[:40]+swapper_address) validation           sha3-256(swapper_address) exchange_addr_i     the index of the exchange address of the list _input_total          the input amount of the specific token This function is called by the swapper who approves the specific ERC20 or directly transfer the ETH first and wants to swap the desired amount of the target token. The swapped amount is calculated based on the pool ratio. After swap successfully, the same account can not swap the same pool again.*\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"check_availability(bytes32)\":{\"notice\":\"check_availability() returns a bunch of pool info given a pool id id                    swap pool id this function returns 1. exchange_addrs that can be used to determine the index                       2. remaining target tokens                       3. if started                       4. if ended                       5. swapped amount of the query address                       5. exchanged amount of each token*\"},\"destruct(bytes32)\":{\"notice\":\"destruct() destructs the given pool given the pool id id                    swap pool id this function can only be called by the pool creator. after validation, it transfers all the remaining token  (if any) and all the swapped tokens to the pool creator. it will then destruct the pool by reseting almost  all the variables to zero to get the gas refund. note that this function may not work if a pool needs to transfer over ~200 tokens back to the address due to  the block gas limit. we have another function withdraw() to help the pool creator to withdraw a single token *\"},\"withdraw(bytes32,uint256)\":{\"notice\":\"withdraw() transfers out a single token after a pool is expired or empty  id                    swap pool id addr_i                withdraw token index this function can only be called by the pool creator. after validation, it transfers the addr_i th token  out to the pool creator address.*\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ito.sol\":\"HappyTokenPool\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x99f5c21018d796db7833a2100bb0e7411999e248a3c950fb526eee5d2bf47cb7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value < 2**128, \\\"SafeCast: value doesn\\\\'t fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value < 2**64, \\\"SafeCast: value doesn\\\\'t fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value < 2**32, \\\"SafeCast: value doesn\\\\'t fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value < 2**16, \\\"SafeCast: value doesn\\\\'t fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value < 2**8, \\\"SafeCast: value doesn\\\\'t fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= -2**127 && value < 2**127, \\\"SafeCast: value doesn\\\\'t fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= -2**63 && value < 2**63, \\\"SafeCast: value doesn\\\\'t fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= -2**31 && value < 2**31, \\\"SafeCast: value doesn\\\\'t fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= -2**15 && value < 2**15, \\\"SafeCast: value doesn\\\\'t fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= -2**7 && value < 2**7, \\\"SafeCast: value doesn\\\\'t fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        require(value < 2**255, \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0xc37d85b96c2a8d7bc09f25958e0a81394bf5780286444147ddf875fa628d53ce\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2526b7c6a366fc211bbc176078ab02b83833e7682abcc5b3bed9d700b34e2a3e\",\"license\":\"MIT\"},\"contracts/IQLF.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/**\\n * @author          Yisi Liu\\n * @contact         yisiliu@gmail.com\\n * @author_time     01/06/2021\\n**/\\n\\npragma solidity >= 0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\nabstract contract IQLF is IERC165 {\\n    /**\\n     * @dev Returns if the given address is qualified, implemented on demand.\\n     */\\n    function ifQualified (address account) virtual external view returns (bool);\\n\\n    /**\\n     * @dev Logs if the given address is qualified, implemented on demand.\\n     */\\n    function logQualified (address account, uint256 ito_start_time) virtual external returns (bool);\\n\\n    /**\\n     * @dev Ensure that custom contract implements `ifQualified` amd `logQualified` correctly.\\n     */\\n    function supportsInterface(bytes4 interfaceId) virtual external override pure returns (bool) {\\n        return interfaceId == this.supportsInterface.selector || \\n            interfaceId == (this.ifQualified.selector ^ this.logQualified.selector);\\n    }\\n\\n    /**\\n     * @dev Emit when `ifQualified` is called to decide if the given `address`\\n     * is `qualified` according to the preset rule by the contract creator and \\n     * the current block `number` and the current block `timestamp`.\\n     */\\n    event Qualification(address account, bool qualified, uint256 blockNumber, uint256 timestamp);\\n}\\n\",\"keccak256\":\"0xb6babcf507e5ead7b3ea134feb08b52c2b5be92782c9e97b798ef144a7e9e26c\",\"license\":\"MIT\"},\"contracts/ito.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/**\\n * @author          Yisi Liu\\n * @contact         yisiliu@gmail.com\\n * @author_time     01/06/2021\\n * @maintainer      Hancheng Zhou, Yisi Liu\\n * @maintain_time   04/15/2021\\n**/\\n\\npragma solidity >= 0.8.0;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport \\\"./IQLF.sol\\\";\\n\\ncontract HappyTokenPool {\\n    struct Packed1 {\\n        address qualification_addr;\\n        uint40 password;\\n    }\\n\\n    struct Packed2 {\\n        uint128 total_tokens;\\n        uint128 limit;\\n    }\\n\\n    struct Packed3 {\\n        address token_address;\\n        uint32 start_time;\\n        uint32 end_time;\\n        uint32 unlock_time;\\n    }\\n\\n    struct Pool {\\n        Packed1 packed1;\\n        Packed2 packed2;\\n        Packed3 packed3;\\n\\n        address creator;\\n        address[] exchange_addrs;   // a list of ERC20 addresses for swapping\\n        uint128[] exchanged_tokens; // a list of amounts of swapped tokens\\n        uint128[] ratios;           // a list of swap ratios\\n                                    // length = 2 * exchange_addrs.length\\n                                    // [address1, target, address2, target, ...]\\n                                    // e.g. [1, 10]\\n                                    // represents 1 tokenA to swap 10 target token\\n                                    // note: each ratio pair needs to be coprime\\n        // Change: ABI compatible with existing contract\\n        // Add more states, like swapped, claimed, etc\\n        mapping(address => uint256) swapped_map;      // swapped amount of an address\\n    }\\n\\n    // Change: ABI NOT compatible with existing contract\\n    // Using indexed event\\n    // swap pool filling success event\\n    event FillSuccess (\\n        uint256 total,\\n        bytes32 id,\\n        address creator,\\n        uint256 creation_time,\\n        address token_address,\\n        string message,\\n        uint128[] ratios,\\n        address qualification,\\n        uint256 limit\\n    );\\n\\n    // swap success event\\n    event SwapSuccess (\\n        bytes32 id,\\n        address swapper,\\n        address from_address,\\n        address to_address,\\n        uint256 from_value,\\n        uint256 to_value,\\n        uint128 input_total\\n    );\\n\\n    // claim success event\\n    event ClaimSuccess (\\n        bytes32 id,\\n        address claimer,\\n        uint256 timestamp,\\n        uint256 to_value,\\n        address token_address\\n    );\\n\\n    // swap pool destruct success event\\n    event DestructSuccess (\\n        bytes32 id,\\n        address token_address,\\n        uint256 remaining_balance,\\n        uint128[] exchanged_values\\n    );\\n\\n    // single token withdrawl from a swap pool success even\\n    event WithdrawSuccess (\\n        bytes32 id,\\n        address token_address,\\n        uint256 withdraw_balance\\n    );\\n\\n    using SafeERC20 for IERC20;\\n    uint32 nonce;\\n    uint224 base_time;                 // timestamp = base_time + delta to save gas\\n    mapping(bytes32 => Pool) pool_by_id;    // maps an id to a Pool instance\\n    string constant private magic = \\\"Prince Philip, Queen Elizabeth II's husband, has died aged 99, \\\\\\n    Buckingham Palace has announced. A statement issued by the palace just after midday spoke of the \\\\\\n    Queen's deep sorrow following his death at Windsor Castle on Friday morning. The Duke of Edinbur\\\";\\n    bytes32 private seed;\\n    address constant DEFAULT_ADDRESS = address(0);       // a universal address\\n\\n    constructor() {\\n        seed = keccak256(abi.encodePacked(magic, block.timestamp, msg.sender));\\n        base_time = 1616976000;                                    // 00:00:00 03/30/2021 GMT(UTC+0)\\n    }\\n\\n    /**\\n     * @dev \\n     * fill_pool() creates a swap pool with specific parameters from input\\n     * _hash                sha3-256(password)\\n     * _start               start time delta, real start time = base_time + _start\\n     * _end                 end time delta, real end time = base_time + _end\\n     * message              swap pool creation message, only stored in FillSuccess event\\n     * _exchange_addrs      swap token list (0x0 for ETH, only supports ETH and ERC20 now)\\n     * _ratios              swap pair ratio list\\n     * _unlock_time         unlock time delta real unlock time = base_time + _unlock_time\\n     * _token_addr          swap target token address\\n     * _total_tokens        target token total swap amount\\n     * _limit               target token single swap limit\\n     * _qualification       the qualification contract address based on IQLF to determine qualification\\n     * This function takes the above parameters and creates the pool. _total_tokens of the target token\\n     * will be successfully transferred to this contract securely on a successful run of this function.\\n    **/\\n    function fill_pool (bytes32 _hash, uint256 _start, uint256 _end, string memory message,\\n                        address[] memory _exchange_addrs, uint128[] memory _ratios, uint256 _unlock_time,\\n                        address _token_addr, uint256 _total_tokens, uint256 _limit, address _qualification)\\n    public payable {\\n        nonce ++;\\n        require(_start < _end, \\\"Start time should be earlier than end time.\\\");\\n        require(_end < _unlock_time || _unlock_time == 0, \\\"End time should be earlier than unlock time\\\");\\n        require(_limit <= _total_tokens, \\\"Limit needs to be less than or equal to the total supply\\\");\\n        require(_total_tokens < 2 ** 128, \\\"No more than 2^128 tokens(incluidng decimals) allowed\\\");\\n        require(_exchange_addrs.length > 0, \\\"Exchange token addresses need to be set\\\");\\n        require(_ratios.length == 2 * _exchange_addrs.length, \\\"Size of ratios = 2 * size of exchange_addrs\\\");\\n\\n        bytes32 _id = keccak256(abi.encodePacked(msg.sender, block.timestamp, nonce, seed));\\n        Pool storage pool = pool_by_id[_id];\\n        pool.packed1 = Packed1(_qualification, uint40(uint256(_hash) >> 216));\\n        pool.packed2 = Packed2(uint128(_total_tokens), uint128(_limit));\\n        pool.packed3 = Packed3(_token_addr, uint32(_start), uint32(_end), uint32(_unlock_time));\\n        pool.creator = msg.sender;\\n        pool.exchange_addrs = _exchange_addrs;\\n\\n        // Init each token swapped amount to 0\\n        for (uint256 i = 0; i < _exchange_addrs.length; i++) {\\n            if (_exchange_addrs[i] != DEFAULT_ADDRESS) {\\n                // TODO: Is there a better way to validate an ERC20?\\n                require(IERC20(_exchange_addrs[i]).totalSupply() > 0, \\\"Not a valid ERC20\\\");\\n            }\\n            pool.exchanged_tokens.push(0); \\n        }\\n\\n        pool.ratios = _ratios;                                          // 256 * k\\n        IERC20(_token_addr).safeTransferFrom(msg.sender, address(this), _total_tokens);\\n\\n        emit FillSuccess(_total_tokens, _id, msg.sender, block.timestamp, _token_addr, message, _ratios, _qualification, _limit);\\n    }\\n\\n    /**\\n     * @dev\\n     * swap() allows users to swap tokens in a swap pool\\n     * id                   swap pool id\\n     * verification         sha3-256(sha3-256(password)[:40]+swapper_address)\\n     * validation           sha3-256(swapper_address)\\n     * exchange_addr_i     the index of the exchange address of the list\\n     * _input_total          the input amount of the specific token\\n     * This function is called by the swapper who approves the specific ERC20 or directly transfer the ETH\\n     * first and wants to swap the desired amount of the target token. The swapped amount is calculated\\n     * based on the pool ratio. After swap successfully, the same account can not swap the same pool again.\\n    **/\\n\\n    function swap (bytes32 _id, bytes32 verification,\\n                   bytes32 validation, uint256 exchange_addr_i, uint128 _input_total)\\n    public payable returns (uint256 swapped) {\\n\\n        uint128 from_value = _input_total;\\n        Pool storage pool = pool_by_id[_id];\\n        Packed1 memory packed1 = pool.packed1;\\n        Packed2 memory packed2 = pool.packed2;\\n        Packed3 memory packed3 = pool.packed3;\\n        require (\\n            IQLF(packed1.qualification_addr).logQualified(msg.sender, uint256(packed3.start_time + base_time)) == true, \\n            \\\"Not Qualified\\\"\\n        );\\n        require (packed3.start_time + base_time < block.timestamp, \\\"Not started.\\\");\\n        require (packed3.end_time + base_time > block.timestamp, \\\"Expired.\\\");\\n        // sha3(sha3(passowrd)[:40] + msg.sender) so that the raw password will never appear in the contract\\n        require (verification == keccak256(abi.encodePacked(uint256(packed1.password), msg.sender)), \\n                 'Wrong Password');\\n        // sha3(msg.sender) to protect from front runs (but this is kinda naive since the contract is open sourced)\\n        require (validation == keccak256(abi.encodePacked(msg.sender)), \\\"Validation Failed\\\");\\n\\n        // revert if the pool is empty\\n        require (packed2.total_tokens > 0, \\\"Out of Stock\\\");\\n\\n        address exchange_addr = pool.exchange_addrs[exchange_addr_i];\\n        uint256 ratioA = pool.ratios[exchange_addr_i*2];\\n        uint256 ratioB = pool.ratios[exchange_addr_i*2 + 1];\\n        // check if the input is enough for the desired transfer\\n        if (exchange_addr == DEFAULT_ADDRESS) {\\n            require(msg.value == from_value, 'No enough ether.');\\n        }\\n\\n        uint128 swapped_tokens = SafeCast.toUint128(SafeMath.div(SafeMath.mul(from_value, ratioB), ratioA));\\n        require(swapped_tokens > 0, \\\"Better not draw water with a sieve\\\");\\n\\n        if (swapped_tokens > packed2.limit) {\\n            // don't be greedy - you can only get at most limit tokens\\n            swapped_tokens = packed2.limit;\\n            from_value = SafeCast.toUint128(SafeMath.div(SafeMath.mul(packed2.limit, ratioA), ratioB));           // Update from_value\\n        } else if (swapped_tokens > packed2.total_tokens ) {\\n            // if the left tokens are not enough\\n            swapped_tokens = packed2.total_tokens;\\n            from_value = SafeCast.toUint128(SafeMath.div(SafeMath.mul(packed2.total_tokens , ratioA), ratioB));    // Update from_value\\n            // return the eth\\n            if (exchange_addr == DEFAULT_ADDRESS)\\n                payable(msg.sender).transfer(msg.value - from_value);\\n        }\\n        require(swapped_tokens <= packed2.limit);                                                       // make sure again\\n        pool.exchanged_tokens[exchange_addr_i] = SafeCast.toUint128(SafeMath.add(pool.exchanged_tokens[exchange_addr_i], \\n                                                                      from_value));            // update exchanged\\n\\n        // penalize greedy attackers by placing duplication check at the very last\\n        require (pool.swapped_map[msg.sender] == 0, \\\"Already swapped\\\");\\n\\n        // update the remaining tokens and swapped token mapping\\n        pool.packed2.total_tokens = SafeCast.toUint128(SafeMath.sub(packed2.total_tokens, swapped_tokens));\\n        pool.swapped_map[msg.sender] = swapped_tokens;\\n\\n        // transfer the token after state changing\\n        // ETH comes with the tx, but ERC20 does not - INPUT\\n        if (exchange_addr != DEFAULT_ADDRESS) {\\n            IERC20(exchange_addr).safeTransferFrom(msg.sender, address(this), from_value);\\n        }\\n\\n        {\\n            bytes32 id = _id;\\n            uint128 input_total = _input_total;\\n            // Swap success event\\n            emit SwapSuccess(id, msg.sender, exchange_addr, packed3.token_address, from_value, swapped_tokens, input_total);\\n        }\\n\\n        // if unlock_time == 0, transfer the swapped tokens to the recipient address (msg.sender) - OUTPUT\\n        // if not, claim() needs to be called to get the token\\n        if (packed3.unlock_time == 0) {\\n            IERC20(packed3.token_address).safeTransfer(msg.sender, swapped_tokens);\\n            emit ClaimSuccess(_id, msg.sender, block.timestamp, swapped_tokens, packed3.token_address);\\n        }\\n            \\n        return swapped_tokens;\\n    }\\n\\n    /**\\n     * check_availability() returns a bunch of pool info given a pool id\\n     * id                    swap pool id\\n     * this function returns 1. exchange_addrs that can be used to determine the index\\n     *                       2. remaining target tokens\\n     *                       3. if started\\n     *                       4. if ended\\n     *                       5. swapped amount of the query address\\n     *                       5. exchanged amount of each token\\n    **/\\n\\n    function check_availability (bytes32 id) external view \\n        returns (address[] memory exchange_addrs, uint256 remaining, \\n                 bool started, bool expired, bool unlocked, uint256 unlock_time,\\n                 uint256 swapped, uint128[] memory exchanged_tokens) {\\n        Pool storage pool = pool_by_id[id];\\n        Packed3 memory packed3 = pool.packed3;\\n        return (\\n            pool.exchange_addrs,                                                // exchange_addrs 0x0 means destructed\\n            pool.packed2.total_tokens,                                          // remaining\\n            block.timestamp > packed3.start_time + base_time,                   // started\\n            block.timestamp > packed3.end_time + base_time,                     // expired\\n            block.timestamp > packed3.unlock_time + base_time,                  // unlocked\\n            packed3.unlock_time + base_time,                                    // unlock_time\\n            pool.swapped_map[msg.sender],                                       // swapped number \\n            pool.exchanged_tokens                                               // exchanged tokens\\n        );\\n    }\\n\\n    function claim(bytes32[] memory ito_ids) public {\\n        for (uint256 i = 0; i < ito_ids.length; i++) {\\n            Pool storage pool = pool_by_id[ito_ids[i]];\\n            Packed3 memory packed3 = pool.packed3;\\n            if (packed3.unlock_time == 0)\\n                continue;\\n            if (packed3.unlock_time + base_time > block.timestamp)\\n                continue;\\n            uint256 claimed_amount = pool.swapped_map[msg.sender];\\n            if (claimed_amount == 0)\\n                continue;\\n            pool.swapped_map[msg.sender] = 0;\\n            IERC20(packed3.token_address).safeTransfer(msg.sender, claimed_amount);\\n            emit ClaimSuccess(ito_ids[i], msg.sender, block.timestamp, claimed_amount, packed3.token_address);\\n        }\\n    }\\n\\n    // Change: NOT ABI compatible with existing contract\\n    // `uint256 _unlock_time` -> uint32 _unlock_time\\n    function setUnlockTime(bytes32 id, uint256 _unlock_time) public {\\n        Pool storage pool = pool_by_id[id];\\n        uint32 packed3_unlock_time = pool.packed3.unlock_time;\\n        require(_unlock_time < ~uint32(0) , \\\"invalid unlock time\\\");\\n        require(pool.creator == msg.sender, \\\"Pool Creator Only\\\");\\n        require(block.timestamp < (packed3_unlock_time + base_time), \\\"Too Late\\\");\\n        require(packed3_unlock_time != 0, \\\"Not eligible when unlock_time is 0\\\");\\n        require(_unlock_time != 0, \\\"Cannot set to 0\\\");\\n        pool.packed3.unlock_time = uint32(_unlock_time);\\n    }\\n\\n    /**\\n     * destruct() destructs the given pool given the pool id\\n     * id                    swap pool id\\n     * this function can only be called by the pool creator. after validation, it transfers all the remaining token \\n     * (if any) and all the swapped tokens to the pool creator. it will then destruct the pool by reseting almost \\n     * all the variables to zero to get the gas refund.\\n     * note that this function may not work if a pool needs to transfer over ~200 tokens back to the address due to \\n     * the block gas limit. we have another function withdraw() to help the pool creator to withdraw a single token \\n    **/\\n\\n    function destruct (bytes32 id) public {\\n        Pool storage pool = pool_by_id[id];\\n        Packed3 memory packed3 = pool.packed3;\\n        require(msg.sender == pool.creator, \\\"Only the pool creator can destruct.\\\");\\n\\n        uint256 expiration = pool.packed3.end_time + base_time;\\n        uint256 remaining_tokens = pool.packed2.total_tokens;\\n        // only after expiration or the pool is empty\\n        require(expiration <= block.timestamp || remaining_tokens == 0, \\\"Not expired yet\\\");\\n\\n        // if any left in the pool\\n        if (remaining_tokens != 0) {\\n            IERC20(packed3.token_address).safeTransfer(msg.sender, remaining_tokens);\\n        }\\n        \\n        // transfer the swapped tokens accordingly\\n        // note this loop may exceed the block gas limit so if >200 exchange_addrs this may not work\\n        for (uint256 i = 0; i < pool.exchange_addrs.length; i++) {\\n            if (pool.exchanged_tokens[i] > 0) {\\n                // ERC20\\n                if (pool.exchange_addrs[i] != DEFAULT_ADDRESS)\\n                    IERC20(pool.exchange_addrs[i]).safeTransfer(msg.sender, pool.exchanged_tokens[i]);\\n                // ETH\\n                else\\n                    payable(msg.sender).transfer(pool.exchanged_tokens[i]);\\n            }\\n        }\\n        emit DestructSuccess(id, packed3.token_address, remaining_tokens, pool.exchanged_tokens);\\n\\n        // Gas Refund\\n        pool.packed1 = Packed1(DEFAULT_ADDRESS, 0);\\n        pool.packed2 = Packed2(0, 0);\\n        for (uint256 i = 0; i < pool.exchange_addrs.length; i++) {\\n            pool.exchange_addrs[i] = DEFAULT_ADDRESS;\\n            pool.exchanged_tokens[i] = 0;\\n            pool.ratios[i*2] = 0;\\n            pool.ratios[i*2+1] = 0;\\n        }\\n    }\\n\\n    /**\\n     * withdraw() transfers out a single token after a pool is expired or empty \\n     * id                    swap pool id\\n     * addr_i                withdraw token index\\n     * this function can only be called by the pool creator. after validation, it transfers the addr_i th token \\n     * out to the pool creator address.\\n    **/\\n\\n    function withdraw (bytes32 id, uint256 addr_i) public {\\n        Pool storage pool = pool_by_id[id];\\n        require(msg.sender == pool.creator, \\\"Only the pool creator can withdraw.\\\");\\n\\n        uint256 withdraw_balance = pool.exchanged_tokens[addr_i];\\n        require(withdraw_balance > 0, \\\"None of this token left\\\");\\n        uint256 expiration = pool.packed3.end_time + base_time;\\n        uint256 remaining_tokens = pool.packed2.total_tokens;\\n        // only after expiration or the pool is empty\\n        require(expiration <= block.timestamp || remaining_tokens == 0, \\\"Not expired yet\\\");\\n        address token_address = pool.exchange_addrs[addr_i];\\n\\n        // clear the record\\n        pool.exchanged_tokens[addr_i] = 0;\\n\\n        // ERC20\\n        if (token_address != DEFAULT_ADDRESS)\\n            IERC20(token_address).safeTransfer(msg.sender, withdraw_balance);\\n        // ETH\\n        else\\n            payable(msg.sender).transfer(withdraw_balance);\\n        emit WithdrawSuccess(id, token_address, withdraw_balance);\\n    }\\n}\\n\",\"keccak256\":\"0x591ebaf44914ad3158f3d64ec3e80ef667b3bfeaa1524284523be6b3a956d8ef\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051806101400160405280610108815260200162002fbc6101089139423360405160200162000045939291906200007c565b60408051808303601f1901815291905280516020909101206002556000805463ffffffff16676061188000000000179055620000d0565b60008451815b818110156200009e576020818801810151858301520162000082565b81811115620000ad5782828501525b50919091019283525060601b6001600160601b0319166020820152603401919050565b612edc80620000e06000396000f3fe6080604052600436106100705760003560e01c8063c6d898341161004e578063c6d89834146100f4578063cc0cab4c14610114578063ec0e3d9a14610134578063ef65dc7e1461015457610070565b8063040cf020146100755780636bfdaece14610097578063b391c508146100d4575b600080fd5b34801561008157600080fd5b50610095610090366004612197565b610167565b005b3480156100a357600080fd5b506100b76100b2366004612137565b6103cb565b6040516100cb9897969594939291906123fc565b60405180910390f35b3480156100e057600080fd5b506100956100ef366004612087565b610624565b61010761010236600461214f565b6107e1565b6040516100cb9190612ca9565b34801561012057600080fd5b5061009561012f366004612137565b610fad565b34801561014057600080fd5b5061009561014f366004612197565b6114e2565b6100956101623660046121b8565b611601565b600082815260016020526040902060038101546001600160a01b031633146101aa5760405162461bcd60e51b81526004016101a190612b55565b60405180910390fd5b60008160050183815481106101cf57634e487b7160e01b600052603260045260246000fd5b6000918252602090912060028204015460019091166010026101000a90046001600160801b03169050806102155760405162461bcd60e51b81526004016101a190612835565b60008054600284015461024591600160201b90046001600160e01b031690600160c01b900463ffffffff16612d76565b60018401546001600160e01b039190911691506001600160801b0316428211158061026e575080155b61028a5760405162461bcd60e51b81526004016101a190612798565b60008460040186815481106102af57634e487b7160e01b600052603260045260246000fd5b60009182526020822001546005870180546001600160a01b03909216935090889081106102ec57634e487b7160e01b600052603260045260246000fd5b90600052602060002090600291828204019190066010026101000a8154816001600160801b0302191690836001600160801b0316021790555060006001600160a01b0316816001600160a01b031614610358576103536001600160a01b0382163386611b66565b610387565b604051339085156108fc029086906000818181858888f19350505050158015610385573d6000803e3d6000fd5b505b7fab5315d16ef405a1f4e8c34017af486f59f27097e003d2a1981ae682c2f367318782866040516103ba939291906124e3565b60405180910390a150505050505050565b6000818152600160208181526040808420815160808101835260028201546001600160a01b0381168252600160a01b810463ffffffff908116958301869052600160c01b8204811694830194909452600160e01b9004909216606080840191909152938101548554949594859485948594859485948b9492939260048501926001600160801b03169161046f91600160201b9091046001600160e01b031690612d76565b60005460408501516001600160e01b0392831642119261049d92600160201b9004169063ffffffff16612d76565b60005460608601516001600160e01b039283164211926104cb92600160201b9004169063ffffffff16612d76565b60005460608701516001600160e01b039283164211926104f992600160201b9004169063ffffffff16612d76565b336000908152600789016020908152604091829020548854835181840281018401909452808452909260058c019290918a9183018282801561056457602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610546575b50505050509750866001600160801b03169650826001600160e01b031692508080548060200260200160405190810160405280929190818152602001828054801561060057602002820191906000526020600020906000905b82829054906101000a90046001600160801b03166001600160801b031681526020019060100190602082600f010492830192600103820291508084116105bd5790505b50505050509050995099509950995099509950995099505050919395975091939597565b60005b81518110156107dd5760006001600084848151811061065657634e487b7160e01b600052603260045260246000fd5b6020908102919091018101518252818101929092526040908101600020815160808101835260028201546001600160a01b038116825263ffffffff600160a01b8204811695830195909552600160c01b8104851693820193909352600160e01b90920490921660608201819052919250906106d25750506107cb565b42600060049054906101000a90046001600160e01b0316826060015163ffffffff166106fe9190612d76565b6001600160e01b031611156107145750506107cb565b33600090815260078301602052604090205480610733575050506107cb565b336000818152600785016020526040812055825161075d916001600160a01b039091169083611b66565b7f0b8bdb11ddec1f8dd879bd98afac7c33c30ce590fcbc26ed559df98f9a38111985858151811061079e57634e487b7160e01b600052603260045260246000fd5b602002602001015133428486600001516040516107bf95949392919061260f565b60405180910390a15050505b806107d581612e3b565b915050610627565b5050565b60008581526001602081815260408084208151808301835281546001600160a01b038082168352600160a01b9182900464ffffffffff168387015284518086018652968401546001600160801b038082168952600160801b909104168787015284516080810186526002850154808316825292830463ffffffff908116978201889052600160c01b8404811696820196909652600160e01b9092049094166060820152815187548997949693959293919092169163793803729133916108b891600160201b9091046001600160e01b031690612d76565b6001600160e01b03166040518363ffffffff1660e01b81526004016108de9291906123e3565b602060405180830381600087803b1580156108f857600080fd5b505af115801561090c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109309190612117565b15156001146109515760405162461bcd60e51b81526004016101a190612bc2565b42600060049054906101000a90046001600160e01b0316826020015163ffffffff1661097d9190612d76565b6001600160e01b0316106109a35760405162461bcd60e51b81526004016101a190612a9b565b42600060049054906101000a90046001600160e01b0316826040015163ffffffff166109cf9190612d76565b6001600160e01b0316116109f55760405162461bcd60e51b81526004016101a190612a79565b826020015164ffffffffff1633604051602001610a139291906123a4565b604051602081830303815290604052805190602001208a14610a475760405162461bcd60e51b81526004016101a1906128b3565b33604051602001610a589190612339565b604051602081830303815290604052805190602001208914610a8c5760405162461bcd60e51b81526004016101a190612c33565b81516001600160801b0316610ab35760405162461bcd60e51b81526004016101a190612963565b6000846004018981548110610ad857634e487b7160e01b600052603260045260246000fd5b60009182526020822001546001600160a01b0316915060068601610afd8b6002612dd9565b81548110610b1b57634e487b7160e01b600052603260045260246000fd5b90600052602060002090600291828204019190066010029054906101000a90046001600160801b03166001600160801b031690506000866006018b6002610b629190612dd9565b610b6d906001612da1565b81548110610b8b57634e487b7160e01b600052603260045260246000fd5b6000918252602090912060028204015460019091166010026101000a90046001600160801b031690506001600160a01b038316610bea57876001600160801b03163414610bea5760405162461bcd60e51b81526004016101a190612b98565b6000610c10610c0b610c058b6001600160801b031685611bc1565b85611bd4565b611be0565b90506000816001600160801b031611610c3b5760405162461bcd60e51b81526004016101a19061264e565b85602001516001600160801b0316816001600160801b03161115610c8557506020850151610c7e610c0b610c786001600160801b03841686611bc1565b84611bd4565b9850610d10565b85600001516001600160801b0316816001600160801b03161115610d1057508451610cbf610c0b610c786001600160801b03841686611bc1565b98506001600160a01b038416610d1057336108fc610ce66001600160801b038c1634612df8565b6040518115909202916000818181858888f19350505050158015610d0e573d6000803e3d6000fd5b505b85602001516001600160801b0316816001600160801b03161115610d3357600080fd5b610d9d610c0b896005018e81548110610d5c57634e487b7160e01b600052603260045260246000fd5b90600052602060002090600291828204019190066010029054906101000a90046001600160801b03166001600160801b03168b6001600160801b0316611c0d565b886005018d81548110610dc057634e487b7160e01b600052603260045260246000fd5b90600052602060002090600291828204019190066010026101000a8154816001600160801b0302191690836001600160801b03160217905550876007016000336001600160a01b03166001600160a01b0316815260200190815260200160002054600014610e405760405162461bcd60e51b81526004016101a19061276f565b610e63610c0b87600001516001600160801b0316836001600160801b0316611c19565b6001890180546fffffffffffffffffffffffffffffffff19166001600160801b0392831617905533600090815260078a016020526040902090821690556001600160a01b03841615610ecd57610ecd6001600160a01b03851633306001600160801b038d16611c25565b60008f905060008c90507f21a08168838a558cd18a6d9382d7280f44f3dd05f5e96805c46454de0ace5d6b8233888a600001518f8887604051610f16979695949392919061249c565b60405180910390a15050606085015163ffffffff16610f92578451610f4e906001600160a01b0316336001600160801b038416611b66565b7f0b8bdb11ddec1f8dd879bd98afac7c33c30ce590fcbc26ed559df98f9a3811198f3342848960000151604051610f899594939291906125da565b60405180910390a15b6001600160801b03169e9d5050505050505050505050505050565b600081815260016020908152604091829020825160808101845260028201546001600160a01b03808216835263ffffffff600160a01b8304811695840195909552600160c01b8204851695830195909552600160e01b9004909216606083015260038101549092339116146110345760405162461bcd60e51b81526004016101a190612690565b60008054600284015461106491600160201b90046001600160e01b031690600160c01b900463ffffffff16612d76565b60018401546001600160e01b039190911691506001600160801b0316428211158061108d575080155b6110a95760405162461bcd60e51b81526004016101a190612798565b80156110c55782516110c5906001600160a01b03163383611b66565b60005b60048501548110156112ac5760008560050182815481106110f957634e487b7160e01b600052603260045260246000fd5b6000918252602090912060028204015460019091166010026101000a90046001600160801b0316111561129a5760006001600160a01b031685600401828154811061115457634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b03161461120b576112063386600501838154811061119557634e487b7160e01b600052603260045260246000fd5b90600052602060002090600291828204019190066010029054906101000a90046001600160801b03166001600160801b03168760040184815481106111ea57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b03169190611b66565b61129a565b336001600160a01b03166108fc86600501838154811061123b57634e487b7160e01b600052603260045260246000fd5b90600052602060002090600291828204019190066010029054906101000a90046001600160801b03166001600160801b03169081150290604051600060405180830381858888f19350505050158015611298573d6000803e3d6000fd5b505b806112a481612e3b565b9150506110c8565b5082516040517f01a1fd9d8a4231d7bd8926ce16b753ba03e0310e0a776f13eba8e0c3cba7ea89916112e791889190859060058a0190612502565b60405180910390a16040805180820182526000808252602091820181905286546001600160c81b031916875582518084019093528083529101819052600185018190555b60048501548110156114da57600085600401828154811061135c57634e487b7160e01b600052603260045260246000fd5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060008560050182815481106113af57634e487b7160e01b600052603260045260246000fd5b90600052602060002090600291828204019190066010026101000a8154816001600160801b0302191690836001600160801b031602179055506000856006018260026113fb9190612dd9565b8154811061141957634e487b7160e01b600052603260045260246000fd5b90600052602060002090600291828204019190066010026101000a8154816001600160801b0302191690836001600160801b031602179055506000856006018260026114659190612dd9565b611470906001612da1565b8154811061148e57634e487b7160e01b600052603260045260246000fd5b90600052602060002090600291828204019190066010026101000a8154816001600160801b0302191690836001600160801b0316021790555080806114d290612e3b565b91505061132b565b505050505050565b6000828152600160205260409020600281015463ffffffff600160e01b90910481169083106115235760405162461bcd60e51b81526004016101a190612a21565b60038201546001600160a01b0316331461154f5760405162461bcd60e51b81526004016101a190612a4e565b60005461157290600160201b90046001600160e01b031663ffffffff8316612d76565b6001600160e01b031642106115995760405162461bcd60e51b81526004016101a190612989565b63ffffffff81166115bc5760405162461bcd60e51b81526004016101a190612921565b826115d95760405162461bcd60e51b81526004016101a1906127c1565b50600201805463ffffffff909216600160e01b026001600160e01b0390921691909117905550565b6000805463ffffffff16908061161683612e56565b91906101000a81548163ffffffff021916908363ffffffff16021790555050888a106116545760405162461bcd60e51b81526004016101a1906127ea565b84891080611660575084155b61167c5760405162461bcd60e51b81526004016101a190612c5e565b8282111561169c5760405162461bcd60e51b81526004016101a190612af8565b600160801b83106116bf5760405162461bcd60e51b81526004016101a19061271a565b60008751116116e05760405162461bcd60e51b81526004016101a1906126d3565b86516116ed906002612dd9565b86511461170c5760405162461bcd60e51b81526004016101a1906129ab565b6000805460025460405161172f923392429263ffffffff90921691602001612351565b60405160208183030381529060405280519060200120905060006001600083815260200190815260200160002090506040518060400160405280846001600160a01b0316815260200160d88f60001c901c64ffffffffff168152508160000160008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160000160146101000a81548164ffffffffff021916908364ffffffffff1602179055509050506040518060400160405280866001600160801b03168152602001856001600160801b03168152508160010160008201518160000160006101000a8154816001600160801b0302191690836001600160801b0316021790555060208201518160000160106101000a8154816001600160801b0302191690836001600160801b031602179055509050506040518060800160405280876001600160a01b031681526020018d63ffffffff1681526020018c63ffffffff1681526020018863ffffffff168152508160020160008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160000160146101000a81548163ffffffff021916908363ffffffff16021790555060408201518160000160186101000a81548163ffffffff021916908363ffffffff160217905550606082015181600001601c6101000a81548163ffffffff021916908363ffffffff160217905550905050338160030160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555088816004019080519060200190611995929190611df1565b5060005b8951811015611ae45760006001600160a01b03168a82815181106119cd57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b031614611a9a5760008a8281518110611a0557634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611a4557600080fd5b505afa158015611a59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a7d919061229f565b11611a9a5760405162461bcd60e51b81526004016101a1906129f6565b600582018054600180820183556000928352602090922060028204018054929091166010026101000a6001600160801b030219909116905580611adc81612e3b565b915050611999565b508751611afa90600683019060208b0190611e56565b50611b106001600160a01b038716333088611c25565b7f40673e9f2e1c0c28f680f6316a99716027d2dd19914340eac6ee4315c173077e858333428a8f8e8a8c604051611b4f99989796959493929190612cb2565b60405180910390a150505050505050505050505050565b611bbc8363a9059cbb60e01b8484604051602401611b859291906123e3565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611c4c565b505050565b6000611bcd8284612dd9565b9392505050565b6000611bcd8284612db9565b6000600160801b8210611c055760405162461bcd60e51b81526004016101a19061286c565b50805b919050565b6000611bcd8284612da1565b6000611bcd8284612df8565b611c46846323b872dd60e01b858585604051602401611b85939291906123bf565b50505050565b6000611ca1826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611cdb9092919063ffffffff16565b805190915015611bbc5780806020019051810190611cbf9190612117565b611bbc5760405162461bcd60e51b81526004016101a190612be9565b6060611cea8484600085611cf2565b949350505050565b606082471015611d145760405162461bcd60e51b81526004016101a1906128db565b611d1d85611db2565b611d395760405162461bcd60e51b81526004016101a190612ac1565b600080866001600160a01b03168587604051611d559190612388565b60006040518083038185875af1925050503d8060008114611d92576040519150601f19603f3d011682016040523d82523d6000602084013e611d97565b606091505b5091509150611da7828286611db8565b979650505050505050565b3b151590565b60608315611dc7575081611bcd565b825115611dd75782518084602001fd5b8160405162461bcd60e51b81526004016101a1919061263b565b828054828255906000526020600020908101928215611e46579160200282015b82811115611e4657825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190611e11565b50611e52929150611f05565b5090565b82805482825590600052602060002090600101600290048101928215611e465791602002820160005b83821115611ec957835183826101000a8154816001600160801b0302191690836001600160801b031602179055509260200192601001602081600f01049283019260010302611e7f565b8015611efc5782816101000a8154906001600160801b030219169055601001602081600f01049283019260010302611ec9565b5050611e529291505b5b80821115611e525760008155600101611f06565b80356001600160a01b0381168114611c0857600080fd5b600082601f830112611f41578081fd5b81356020611f56611f5183612d46565b612d1c565b8281528181019085830183850287018401881015611f72578586fd5b855b85811015611f9757611f8582611f1a565b84529284019290840190600101611f74565b5090979650505050505050565b600082601f830112611fb4578081fd5b81356020611fc4611f5183612d46565b8281528181019085830183850287018401881015611fe0578586fd5b855b85811015611f9757611ff382612070565b84529284019290840190600101611fe2565b600082601f830112612015578081fd5b813567ffffffffffffffff81111561202f5761202f612e90565b612042601f8201601f1916602001612d1c565b818152846020838601011115612056578283fd5b816020850160208301379081016020019190915292915050565b80356001600160801b0381168114611c0857600080fd5b60006020808385031215612099578182fd5b823567ffffffffffffffff8111156120af578283fd5b8301601f810185136120bf578283fd5b80356120cd611f5182612d46565b81815283810190838501858402850186018910156120e9578687fd5b8694505b8385101561210b5780358352600194909401939185019185016120ed565b50979650505050505050565b600060208284031215612128578081fd5b81518015158114611bcd578182fd5b600060208284031215612148578081fd5b5035919050565b600080600080600060a08688031215612166578081fd5b8535945060208601359350604086013592506060860135915061218b60808701612070565b90509295509295909350565b600080604083850312156121a9578182fd5b50508035926020909101359150565b60008060008060008060008060008060006101608c8e0312156121d9578586fd5b8b359a5060208c0135995060408c0135985067ffffffffffffffff8060608e01351115612204578687fd5b6122148e60608f01358f01612005565b98508060808e01351115612226578687fd5b6122368e60808f01358f01611f31565b97508060a08e01351115612248578687fd5b506122598d60a08e01358e01611fa4565b955060c08c0135945061226e60e08d01611f1a565b93506101008c013592506101208c0135915061228d6101408d01611f1a565b90509295989b509295989b9093969950565b6000602082840312156122b0578081fd5b5051919050565b6000815180845260208085019450808401835b838110156122ef5781516001600160801b0316875295820195908201906001016122ca565b509495945050505050565b15159052565b60008151808452612318816020860160208601612e0f565b601f01601f19169290920160200192915050565b6001600160801b03169052565b60609190911b6001600160601b031916815260140190565b60609490941b6001600160601b0319168452601484019290925260e01b6001600160e01b0319166034830152603882015260580190565b6000825161239a818460208701612e0f565b9190910192915050565b91825260601b6001600160601b031916602082015260340190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b6101008082528951908201819052600090610120830190602090818d01845b828110156124405781516001600160a01b03168552938301939083019060010161241b565b50505083018a9052612455604084018a6122fa565b61246260608401896122fa565b61246f60808401886122fa565b8560a08401528460c084015282810360e084015261248d81856122b7565b9b9a5050505050505050505050565b9687526001600160a01b03958616602088015293851660408701529190931660608501526001600160801b039283166080850152821660a08401521660c082015260e00190565b9283526001600160a01b03919091166020830152604082015260600190565b60006080808301878452602060018060a01b03881681860152604087818701528360608701528287546125358186612ca9565b915061254089612d6a565b9450865b60018281830110612555575061258a565b865461256a856001600160801b03831661232c565b612578878601828b1c61232c565b50959095019491830191600201612544565b945494818110156125b0576125a8836001600160801b03881661232c565b918401916001015b818110156125c9576125c48387891c61232c565b918401915b50909b9a5050505050505050505050565b9485526001600160a01b03938416602086015260408501929092526001600160801b0316606084015216608082015260a00190565b9485526001600160a01b0393841660208601526040850192909252606084015216608082015260a00190565b600060208252611bcd6020830184612300565b60208082526022908201527f426574746572206e6f7420647261772077617465722077697468206120736965604082015261766560f01b606082015260800190565b60208082526023908201527f4f6e6c792074686520706f6f6c2063726561746f722063616e2064657374727560408201526231ba1760e91b606082015260800190565b60208082526027908201527f45786368616e676520746f6b656e20616464726573736573206e65656420746f604082015266081899481cd95d60ca1b606082015260800190565b60208082526035908201527f4e6f206d6f7265207468616e20325e31323820746f6b656e7328696e636c7569604082015274191b99c8191958da5b585b1cca48185b1b1bddd959605a1b606082015260800190565b6020808252600f908201526e105b1c9958591e481cddd85c1c1959608a1b604082015260600190565b6020808252600f908201526e139bdd08195e1c1a5c9959081e595d608a1b604082015260600190565b6020808252600f908201526e043616e6e6f742073657420746f203608c1b604082015260600190565b6020808252602b908201527f53746172742074696d652073686f756c64206265206561726c6965722074686160408201526a371032b732103a34b6b29760a91b606082015260800190565b60208082526017908201527f4e6f6e65206f66207468697320746f6b656e206c656674000000000000000000604082015260600190565b60208082526027908201527f53616665436173743a2076616c756520646f65736e27742066697420696e20316040820152663238206269747360c81b606082015260800190565b6020808252600e908201526d15dc9bdb99c814185cdcdddbdc9960921b604082015260600190565b60208082526026908201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6040820152651c8818d85b1b60d21b606082015260800190565b60208082526022908201527f4e6f7420656c696769626c65207768656e20756e6c6f636b5f74696d65206973604082015261020360f41b606082015260800190565b6020808252600c908201526b4f7574206f662053746f636b60a01b604082015260600190565b602080825260089082015267546f6f204c61746560c01b604082015260600190565b6020808252602b908201527f53697a65206f6620726174696f73203d2032202a2073697a65206f662065786360408201526a68616e67655f616464727360a81b606082015260800190565b60208082526011908201527004e6f7420612076616c696420455243323607c1b604082015260600190565b602080825260139082015272696e76616c696420756e6c6f636b2074696d6560681b604082015260600190565b602080825260119082015270506f6f6c2043726561746f72204f6e6c7960781b604082015260600190565b60208082526008908201526722bc3834b932b21760c11b604082015260600190565b6020808252600c908201526b2737ba1039ba30b93a32b21760a11b604082015260600190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b60208082526038908201527f4c696d6974206e6565647320746f206265206c657373207468616e206f72206560408201527f7175616c20746f2074686520746f74616c20737570706c790000000000000000606082015260800190565b60208082526023908201527f4f6e6c792074686520706f6f6c2063726561746f722063616e2077697468647260408201526230bb9760e91b606082015260800190565b60208082526010908201526f27379032b737bab3b41032ba3432b91760811b604082015260600190565b6020808252600d908201526c139bdd08145d585b1a599a5959609a1b604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6040820152691bdd081cdd58d8d9595960b21b606082015260800190565b60208082526011908201527015985b1a59185d1a5bdb8811985a5b1959607a1b604082015260600190565b6020808252602b908201527f456e642074696d652073686f756c64206265206561726c696572207468616e2060408201526a756e6c6f636b2074696d6560a81b606082015260800190565b90815260200190565b60006101208b83528a602084015260018060a01b03808b16604085015289606085015280891660808501528160a0850152612cef82850189612300565b915083820360c0850152612d0382886122b7565b951660e084015250506101000152979650505050505050565b60405181810167ffffffffffffffff81118282101715612d3e57612d3e612e90565b604052919050565b600067ffffffffffffffff821115612d6057612d60612e90565b5060209081020190565b60009081526020902090565b60006001600160e01b03828116848216808303821115612d9857612d98612e7a565b01949350505050565b60008219821115612db457612db4612e7a565b500190565b600082612dd457634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615612df357612df3612e7a565b500290565b600082821015612e0a57612e0a612e7a565b500390565b60005b83811015612e2a578181015183820152602001612e12565b83811115611c465750506000910152565b6000600019821415612e4f57612e4f612e7a565b5060010190565b600063ffffffff80831681811415612e7057612e70612e7a565b6001019392505050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfea26469706673582212203b573bdd62779a98341244d66e07a64223bef05390769d76625b2de5a4c88b8a64736f6c634300080000335072696e6365205068696c69702c20517565656e20456c697a616265746820494927732068757362616e642c20686173206469656420616765642039392c20202020204275636b696e6768616d2050616c6163652068617320616e6e6f756e6365642e20412073746174656d656e7420697373756564206279207468652070616c616365206a757374206166746572206d69646461792073706f6b65206f66207468652020202020517565656e2773206465657020736f72726f7720666f6c6c6f77696e67206869732064656174682061742057696e64736f7220436173746c65206f6e20467269646179206d6f726e696e672e205468652044756b65206f66204564696e627572",
  "deployedBytecode": "0x6080604052600436106100705760003560e01c8063c6d898341161004e578063c6d89834146100f4578063cc0cab4c14610114578063ec0e3d9a14610134578063ef65dc7e1461015457610070565b8063040cf020146100755780636bfdaece14610097578063b391c508146100d4575b600080fd5b34801561008157600080fd5b50610095610090366004612197565b610167565b005b3480156100a357600080fd5b506100b76100b2366004612137565b6103cb565b6040516100cb9897969594939291906123fc565b60405180910390f35b3480156100e057600080fd5b506100956100ef366004612087565b610624565b61010761010236600461214f565b6107e1565b6040516100cb9190612ca9565b34801561012057600080fd5b5061009561012f366004612137565b610fad565b34801561014057600080fd5b5061009561014f366004612197565b6114e2565b6100956101623660046121b8565b611601565b600082815260016020526040902060038101546001600160a01b031633146101aa5760405162461bcd60e51b81526004016101a190612b55565b60405180910390fd5b60008160050183815481106101cf57634e487b7160e01b600052603260045260246000fd5b6000918252602090912060028204015460019091166010026101000a90046001600160801b03169050806102155760405162461bcd60e51b81526004016101a190612835565b60008054600284015461024591600160201b90046001600160e01b031690600160c01b900463ffffffff16612d76565b60018401546001600160e01b039190911691506001600160801b0316428211158061026e575080155b61028a5760405162461bcd60e51b81526004016101a190612798565b60008460040186815481106102af57634e487b7160e01b600052603260045260246000fd5b60009182526020822001546005870180546001600160a01b03909216935090889081106102ec57634e487b7160e01b600052603260045260246000fd5b90600052602060002090600291828204019190066010026101000a8154816001600160801b0302191690836001600160801b0316021790555060006001600160a01b0316816001600160a01b031614610358576103536001600160a01b0382163386611b66565b610387565b604051339085156108fc029086906000818181858888f19350505050158015610385573d6000803e3d6000fd5b505b7fab5315d16ef405a1f4e8c34017af486f59f27097e003d2a1981ae682c2f367318782866040516103ba939291906124e3565b60405180910390a150505050505050565b6000818152600160208181526040808420815160808101835260028201546001600160a01b0381168252600160a01b810463ffffffff908116958301869052600160c01b8204811694830194909452600160e01b9004909216606080840191909152938101548554949594859485948594859485948b9492939260048501926001600160801b03169161046f91600160201b9091046001600160e01b031690612d76565b60005460408501516001600160e01b0392831642119261049d92600160201b9004169063ffffffff16612d76565b60005460608601516001600160e01b039283164211926104cb92600160201b9004169063ffffffff16612d76565b60005460608701516001600160e01b039283164211926104f992600160201b9004169063ffffffff16612d76565b336000908152600789016020908152604091829020548854835181840281018401909452808452909260058c019290918a9183018282801561056457602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610546575b50505050509750866001600160801b03169650826001600160e01b031692508080548060200260200160405190810160405280929190818152602001828054801561060057602002820191906000526020600020906000905b82829054906101000a90046001600160801b03166001600160801b031681526020019060100190602082600f010492830192600103820291508084116105bd5790505b50505050509050995099509950995099509950995099505050919395975091939597565b60005b81518110156107dd5760006001600084848151811061065657634e487b7160e01b600052603260045260246000fd5b6020908102919091018101518252818101929092526040908101600020815160808101835260028201546001600160a01b038116825263ffffffff600160a01b8204811695830195909552600160c01b8104851693820193909352600160e01b90920490921660608201819052919250906106d25750506107cb565b42600060049054906101000a90046001600160e01b0316826060015163ffffffff166106fe9190612d76565b6001600160e01b031611156107145750506107cb565b33600090815260078301602052604090205480610733575050506107cb565b336000818152600785016020526040812055825161075d916001600160a01b039091169083611b66565b7f0b8bdb11ddec1f8dd879bd98afac7c33c30ce590fcbc26ed559df98f9a38111985858151811061079e57634e487b7160e01b600052603260045260246000fd5b602002602001015133428486600001516040516107bf95949392919061260f565b60405180910390a15050505b806107d581612e3b565b915050610627565b5050565b60008581526001602081815260408084208151808301835281546001600160a01b038082168352600160a01b9182900464ffffffffff168387015284518086018652968401546001600160801b038082168952600160801b909104168787015284516080810186526002850154808316825292830463ffffffff908116978201889052600160c01b8404811696820196909652600160e01b9092049094166060820152815187548997949693959293919092169163793803729133916108b891600160201b9091046001600160e01b031690612d76565b6001600160e01b03166040518363ffffffff1660e01b81526004016108de9291906123e3565b602060405180830381600087803b1580156108f857600080fd5b505af115801561090c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109309190612117565b15156001146109515760405162461bcd60e51b81526004016101a190612bc2565b42600060049054906101000a90046001600160e01b0316826020015163ffffffff1661097d9190612d76565b6001600160e01b0316106109a35760405162461bcd60e51b81526004016101a190612a9b565b42600060049054906101000a90046001600160e01b0316826040015163ffffffff166109cf9190612d76565b6001600160e01b0316116109f55760405162461bcd60e51b81526004016101a190612a79565b826020015164ffffffffff1633604051602001610a139291906123a4565b604051602081830303815290604052805190602001208a14610a475760405162461bcd60e51b81526004016101a1906128b3565b33604051602001610a589190612339565b604051602081830303815290604052805190602001208914610a8c5760405162461bcd60e51b81526004016101a190612c33565b81516001600160801b0316610ab35760405162461bcd60e51b81526004016101a190612963565b6000846004018981548110610ad857634e487b7160e01b600052603260045260246000fd5b60009182526020822001546001600160a01b0316915060068601610afd8b6002612dd9565b81548110610b1b57634e487b7160e01b600052603260045260246000fd5b90600052602060002090600291828204019190066010029054906101000a90046001600160801b03166001600160801b031690506000866006018b6002610b629190612dd9565b610b6d906001612da1565b81548110610b8b57634e487b7160e01b600052603260045260246000fd5b6000918252602090912060028204015460019091166010026101000a90046001600160801b031690506001600160a01b038316610bea57876001600160801b03163414610bea5760405162461bcd60e51b81526004016101a190612b98565b6000610c10610c0b610c058b6001600160801b031685611bc1565b85611bd4565b611be0565b90506000816001600160801b031611610c3b5760405162461bcd60e51b81526004016101a19061264e565b85602001516001600160801b0316816001600160801b03161115610c8557506020850151610c7e610c0b610c786001600160801b03841686611bc1565b84611bd4565b9850610d10565b85600001516001600160801b0316816001600160801b03161115610d1057508451610cbf610c0b610c786001600160801b03841686611bc1565b98506001600160a01b038416610d1057336108fc610ce66001600160801b038c1634612df8565b6040518115909202916000818181858888f19350505050158015610d0e573d6000803e3d6000fd5b505b85602001516001600160801b0316816001600160801b03161115610d3357600080fd5b610d9d610c0b896005018e81548110610d5c57634e487b7160e01b600052603260045260246000fd5b90600052602060002090600291828204019190066010029054906101000a90046001600160801b03166001600160801b03168b6001600160801b0316611c0d565b886005018d81548110610dc057634e487b7160e01b600052603260045260246000fd5b90600052602060002090600291828204019190066010026101000a8154816001600160801b0302191690836001600160801b03160217905550876007016000336001600160a01b03166001600160a01b0316815260200190815260200160002054600014610e405760405162461bcd60e51b81526004016101a19061276f565b610e63610c0b87600001516001600160801b0316836001600160801b0316611c19565b6001890180546fffffffffffffffffffffffffffffffff19166001600160801b0392831617905533600090815260078a016020526040902090821690556001600160a01b03841615610ecd57610ecd6001600160a01b03851633306001600160801b038d16611c25565b60008f905060008c90507f21a08168838a558cd18a6d9382d7280f44f3dd05f5e96805c46454de0ace5d6b8233888a600001518f8887604051610f16979695949392919061249c565b60405180910390a15050606085015163ffffffff16610f92578451610f4e906001600160a01b0316336001600160801b038416611b66565b7f0b8bdb11ddec1f8dd879bd98afac7c33c30ce590fcbc26ed559df98f9a3811198f3342848960000151604051610f899594939291906125da565b60405180910390a15b6001600160801b03169e9d5050505050505050505050505050565b600081815260016020908152604091829020825160808101845260028201546001600160a01b03808216835263ffffffff600160a01b8304811695840195909552600160c01b8204851695830195909552600160e01b9004909216606083015260038101549092339116146110345760405162461bcd60e51b81526004016101a190612690565b60008054600284015461106491600160201b90046001600160e01b031690600160c01b900463ffffffff16612d76565b60018401546001600160e01b039190911691506001600160801b0316428211158061108d575080155b6110a95760405162461bcd60e51b81526004016101a190612798565b80156110c55782516110c5906001600160a01b03163383611b66565b60005b60048501548110156112ac5760008560050182815481106110f957634e487b7160e01b600052603260045260246000fd5b6000918252602090912060028204015460019091166010026101000a90046001600160801b0316111561129a5760006001600160a01b031685600401828154811061115457634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b03161461120b576112063386600501838154811061119557634e487b7160e01b600052603260045260246000fd5b90600052602060002090600291828204019190066010029054906101000a90046001600160801b03166001600160801b03168760040184815481106111ea57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b03169190611b66565b61129a565b336001600160a01b03166108fc86600501838154811061123b57634e487b7160e01b600052603260045260246000fd5b90600052602060002090600291828204019190066010029054906101000a90046001600160801b03166001600160801b03169081150290604051600060405180830381858888f19350505050158015611298573d6000803e3d6000fd5b505b806112a481612e3b565b9150506110c8565b5082516040517f01a1fd9d8a4231d7bd8926ce16b753ba03e0310e0a776f13eba8e0c3cba7ea89916112e791889190859060058a0190612502565b60405180910390a16040805180820182526000808252602091820181905286546001600160c81b031916875582518084019093528083529101819052600185018190555b60048501548110156114da57600085600401828154811061135c57634e487b7160e01b600052603260045260246000fd5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060008560050182815481106113af57634e487b7160e01b600052603260045260246000fd5b90600052602060002090600291828204019190066010026101000a8154816001600160801b0302191690836001600160801b031602179055506000856006018260026113fb9190612dd9565b8154811061141957634e487b7160e01b600052603260045260246000fd5b90600052602060002090600291828204019190066010026101000a8154816001600160801b0302191690836001600160801b031602179055506000856006018260026114659190612dd9565b611470906001612da1565b8154811061148e57634e487b7160e01b600052603260045260246000fd5b90600052602060002090600291828204019190066010026101000a8154816001600160801b0302191690836001600160801b0316021790555080806114d290612e3b565b91505061132b565b505050505050565b6000828152600160205260409020600281015463ffffffff600160e01b90910481169083106115235760405162461bcd60e51b81526004016101a190612a21565b60038201546001600160a01b0316331461154f5760405162461bcd60e51b81526004016101a190612a4e565b60005461157290600160201b90046001600160e01b031663ffffffff8316612d76565b6001600160e01b031642106115995760405162461bcd60e51b81526004016101a190612989565b63ffffffff81166115bc5760405162461bcd60e51b81526004016101a190612921565b826115d95760405162461bcd60e51b81526004016101a1906127c1565b50600201805463ffffffff909216600160e01b026001600160e01b0390921691909117905550565b6000805463ffffffff16908061161683612e56565b91906101000a81548163ffffffff021916908363ffffffff16021790555050888a106116545760405162461bcd60e51b81526004016101a1906127ea565b84891080611660575084155b61167c5760405162461bcd60e51b81526004016101a190612c5e565b8282111561169c5760405162461bcd60e51b81526004016101a190612af8565b600160801b83106116bf5760405162461bcd60e51b81526004016101a19061271a565b60008751116116e05760405162461bcd60e51b81526004016101a1906126d3565b86516116ed906002612dd9565b86511461170c5760405162461bcd60e51b81526004016101a1906129ab565b6000805460025460405161172f923392429263ffffffff90921691602001612351565b60405160208183030381529060405280519060200120905060006001600083815260200190815260200160002090506040518060400160405280846001600160a01b0316815260200160d88f60001c901c64ffffffffff168152508160000160008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160000160146101000a81548164ffffffffff021916908364ffffffffff1602179055509050506040518060400160405280866001600160801b03168152602001856001600160801b03168152508160010160008201518160000160006101000a8154816001600160801b0302191690836001600160801b0316021790555060208201518160000160106101000a8154816001600160801b0302191690836001600160801b031602179055509050506040518060800160405280876001600160a01b031681526020018d63ffffffff1681526020018c63ffffffff1681526020018863ffffffff168152508160020160008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160000160146101000a81548163ffffffff021916908363ffffffff16021790555060408201518160000160186101000a81548163ffffffff021916908363ffffffff160217905550606082015181600001601c6101000a81548163ffffffff021916908363ffffffff160217905550905050338160030160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555088816004019080519060200190611995929190611df1565b5060005b8951811015611ae45760006001600160a01b03168a82815181106119cd57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b031614611a9a5760008a8281518110611a0557634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611a4557600080fd5b505afa158015611a59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a7d919061229f565b11611a9a5760405162461bcd60e51b81526004016101a1906129f6565b600582018054600180820183556000928352602090922060028204018054929091166010026101000a6001600160801b030219909116905580611adc81612e3b565b915050611999565b508751611afa90600683019060208b0190611e56565b50611b106001600160a01b038716333088611c25565b7f40673e9f2e1c0c28f680f6316a99716027d2dd19914340eac6ee4315c173077e858333428a8f8e8a8c604051611b4f99989796959493929190612cb2565b60405180910390a150505050505050505050505050565b611bbc8363a9059cbb60e01b8484604051602401611b859291906123e3565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611c4c565b505050565b6000611bcd8284612dd9565b9392505050565b6000611bcd8284612db9565b6000600160801b8210611c055760405162461bcd60e51b81526004016101a19061286c565b50805b919050565b6000611bcd8284612da1565b6000611bcd8284612df8565b611c46846323b872dd60e01b858585604051602401611b85939291906123bf565b50505050565b6000611ca1826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611cdb9092919063ffffffff16565b805190915015611bbc5780806020019051810190611cbf9190612117565b611bbc5760405162461bcd60e51b81526004016101a190612be9565b6060611cea8484600085611cf2565b949350505050565b606082471015611d145760405162461bcd60e51b81526004016101a1906128db565b611d1d85611db2565b611d395760405162461bcd60e51b81526004016101a190612ac1565b600080866001600160a01b03168587604051611d559190612388565b60006040518083038185875af1925050503d8060008114611d92576040519150601f19603f3d011682016040523d82523d6000602084013e611d97565b606091505b5091509150611da7828286611db8565b979650505050505050565b3b151590565b60608315611dc7575081611bcd565b825115611dd75782518084602001fd5b8160405162461bcd60e51b81526004016101a1919061263b565b828054828255906000526020600020908101928215611e46579160200282015b82811115611e4657825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190611e11565b50611e52929150611f05565b5090565b82805482825590600052602060002090600101600290048101928215611e465791602002820160005b83821115611ec957835183826101000a8154816001600160801b0302191690836001600160801b031602179055509260200192601001602081600f01049283019260010302611e7f565b8015611efc5782816101000a8154906001600160801b030219169055601001602081600f01049283019260010302611ec9565b5050611e529291505b5b80821115611e525760008155600101611f06565b80356001600160a01b0381168114611c0857600080fd5b600082601f830112611f41578081fd5b81356020611f56611f5183612d46565b612d1c565b8281528181019085830183850287018401881015611f72578586fd5b855b85811015611f9757611f8582611f1a565b84529284019290840190600101611f74565b5090979650505050505050565b600082601f830112611fb4578081fd5b81356020611fc4611f5183612d46565b8281528181019085830183850287018401881015611fe0578586fd5b855b85811015611f9757611ff382612070565b84529284019290840190600101611fe2565b600082601f830112612015578081fd5b813567ffffffffffffffff81111561202f5761202f612e90565b612042601f8201601f1916602001612d1c565b818152846020838601011115612056578283fd5b816020850160208301379081016020019190915292915050565b80356001600160801b0381168114611c0857600080fd5b60006020808385031215612099578182fd5b823567ffffffffffffffff8111156120af578283fd5b8301601f810185136120bf578283fd5b80356120cd611f5182612d46565b81815283810190838501858402850186018910156120e9578687fd5b8694505b8385101561210b5780358352600194909401939185019185016120ed565b50979650505050505050565b600060208284031215612128578081fd5b81518015158114611bcd578182fd5b600060208284031215612148578081fd5b5035919050565b600080600080600060a08688031215612166578081fd5b8535945060208601359350604086013592506060860135915061218b60808701612070565b90509295509295909350565b600080604083850312156121a9578182fd5b50508035926020909101359150565b60008060008060008060008060008060006101608c8e0312156121d9578586fd5b8b359a5060208c0135995060408c0135985067ffffffffffffffff8060608e01351115612204578687fd5b6122148e60608f01358f01612005565b98508060808e01351115612226578687fd5b6122368e60808f01358f01611f31565b97508060a08e01351115612248578687fd5b506122598d60a08e01358e01611fa4565b955060c08c0135945061226e60e08d01611f1a565b93506101008c013592506101208c0135915061228d6101408d01611f1a565b90509295989b509295989b9093969950565b6000602082840312156122b0578081fd5b5051919050565b6000815180845260208085019450808401835b838110156122ef5781516001600160801b0316875295820195908201906001016122ca565b509495945050505050565b15159052565b60008151808452612318816020860160208601612e0f565b601f01601f19169290920160200192915050565b6001600160801b03169052565b60609190911b6001600160601b031916815260140190565b60609490941b6001600160601b0319168452601484019290925260e01b6001600160e01b0319166034830152603882015260580190565b6000825161239a818460208701612e0f565b9190910192915050565b91825260601b6001600160601b031916602082015260340190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b6101008082528951908201819052600090610120830190602090818d01845b828110156124405781516001600160a01b03168552938301939083019060010161241b565b50505083018a9052612455604084018a6122fa565b61246260608401896122fa565b61246f60808401886122fa565b8560a08401528460c084015282810360e084015261248d81856122b7565b9b9a5050505050505050505050565b9687526001600160a01b03958616602088015293851660408701529190931660608501526001600160801b039283166080850152821660a08401521660c082015260e00190565b9283526001600160a01b03919091166020830152604082015260600190565b60006080808301878452602060018060a01b03881681860152604087818701528360608701528287546125358186612ca9565b915061254089612d6a565b9450865b60018281830110612555575061258a565b865461256a856001600160801b03831661232c565b612578878601828b1c61232c565b50959095019491830191600201612544565b945494818110156125b0576125a8836001600160801b03881661232c565b918401916001015b818110156125c9576125c48387891c61232c565b918401915b50909b9a5050505050505050505050565b9485526001600160a01b03938416602086015260408501929092526001600160801b0316606084015216608082015260a00190565b9485526001600160a01b0393841660208601526040850192909252606084015216608082015260a00190565b600060208252611bcd6020830184612300565b60208082526022908201527f426574746572206e6f7420647261772077617465722077697468206120736965604082015261766560f01b606082015260800190565b60208082526023908201527f4f6e6c792074686520706f6f6c2063726561746f722063616e2064657374727560408201526231ba1760e91b606082015260800190565b60208082526027908201527f45786368616e676520746f6b656e20616464726573736573206e65656420746f604082015266081899481cd95d60ca1b606082015260800190565b60208082526035908201527f4e6f206d6f7265207468616e20325e31323820746f6b656e7328696e636c7569604082015274191b99c8191958da5b585b1cca48185b1b1bddd959605a1b606082015260800190565b6020808252600f908201526e105b1c9958591e481cddd85c1c1959608a1b604082015260600190565b6020808252600f908201526e139bdd08195e1c1a5c9959081e595d608a1b604082015260600190565b6020808252600f908201526e043616e6e6f742073657420746f203608c1b604082015260600190565b6020808252602b908201527f53746172742074696d652073686f756c64206265206561726c6965722074686160408201526a371032b732103a34b6b29760a91b606082015260800190565b60208082526017908201527f4e6f6e65206f66207468697320746f6b656e206c656674000000000000000000604082015260600190565b60208082526027908201527f53616665436173743a2076616c756520646f65736e27742066697420696e20316040820152663238206269747360c81b606082015260800190565b6020808252600e908201526d15dc9bdb99c814185cdcdddbdc9960921b604082015260600190565b60208082526026908201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6040820152651c8818d85b1b60d21b606082015260800190565b60208082526022908201527f4e6f7420656c696769626c65207768656e20756e6c6f636b5f74696d65206973604082015261020360f41b606082015260800190565b6020808252600c908201526b4f7574206f662053746f636b60a01b604082015260600190565b602080825260089082015267546f6f204c61746560c01b604082015260600190565b6020808252602b908201527f53697a65206f6620726174696f73203d2032202a2073697a65206f662065786360408201526a68616e67655f616464727360a81b606082015260800190565b60208082526011908201527004e6f7420612076616c696420455243323607c1b604082015260600190565b602080825260139082015272696e76616c696420756e6c6f636b2074696d6560681b604082015260600190565b602080825260119082015270506f6f6c2043726561746f72204f6e6c7960781b604082015260600190565b60208082526008908201526722bc3834b932b21760c11b604082015260600190565b6020808252600c908201526b2737ba1039ba30b93a32b21760a11b604082015260600190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b60208082526038908201527f4c696d6974206e6565647320746f206265206c657373207468616e206f72206560408201527f7175616c20746f2074686520746f74616c20737570706c790000000000000000606082015260800190565b60208082526023908201527f4f6e6c792074686520706f6f6c2063726561746f722063616e2077697468647260408201526230bb9760e91b606082015260800190565b60208082526010908201526f27379032b737bab3b41032ba3432b91760811b604082015260600190565b6020808252600d908201526c139bdd08145d585b1a599a5959609a1b604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6040820152691bdd081cdd58d8d9595960b21b606082015260800190565b60208082526011908201527015985b1a59185d1a5bdb8811985a5b1959607a1b604082015260600190565b6020808252602b908201527f456e642074696d652073686f756c64206265206561726c696572207468616e2060408201526a756e6c6f636b2074696d6560a81b606082015260800190565b90815260200190565b60006101208b83528a602084015260018060a01b03808b16604085015289606085015280891660808501528160a0850152612cef82850189612300565b915083820360c0850152612d0382886122b7565b951660e084015250506101000152979650505050505050565b60405181810167ffffffffffffffff81118282101715612d3e57612d3e612e90565b604052919050565b600067ffffffffffffffff821115612d6057612d60612e90565b5060209081020190565b60009081526020902090565b60006001600160e01b03828116848216808303821115612d9857612d98612e7a565b01949350505050565b60008219821115612db457612db4612e7a565b500190565b600082612dd457634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615612df357612df3612e7a565b500290565b600082821015612e0a57612e0a612e7a565b500390565b60005b83811015612e2a578181015183820152602001612e12565b83811115611c465750506000910152565b6000600019821415612e4f57612e4f612e7a565b5060010190565b600063ffffffff80831681811415612e7057612e70612e7a565b6001019392505050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfea26469706673582212203b573bdd62779a98341244d66e07a64223bef05390769d76625b2de5a4c88b8a64736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "fill_pool(bytes32,uint256,uint256,string,address[],uint128[],uint256,address,uint256,uint256,address)": {
        "details": " fill_pool() creates a swap pool with specific parameters from input _hash                sha3-256(password) _start               start time delta, real start time = base_time + _start _end                 end time delta, real end time = base_time + _end message              swap pool creation message, only stored in FillSuccess event _exchange_addrs      swap token list (0x0 for ETH, only supports ETH and ERC20 now) _ratios              swap pair ratio list _unlock_time         unlock time delta real unlock time = base_time + _unlock_time _token_addr          swap target token address _total_tokens        target token total swap amount _limit               target token single swap limit _qualification       the qualification contract address based on IQLF to determine qualification This function takes the above parameters and creates the pool. _total_tokens of the target token will be successfully transferred to this contract securely on a successful run of this function.*"
      },
      "swap(bytes32,bytes32,bytes32,uint256,uint128)": {
        "details": "swap() allows users to swap tokens in a swap pool id                   swap pool id verification         sha3-256(sha3-256(password)[:40]+swapper_address) validation           sha3-256(swapper_address) exchange_addr_i     the index of the exchange address of the list _input_total          the input amount of the specific token This function is called by the swapper who approves the specific ERC20 or directly transfer the ETH first and wants to swap the desired amount of the target token. The swapped amount is calculated based on the pool ratio. After swap successfully, the same account can not swap the same pool again.*"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "check_availability(bytes32)": {
        "notice": "check_availability() returns a bunch of pool info given a pool id id                    swap pool id this function returns 1. exchange_addrs that can be used to determine the index                       2. remaining target tokens                       3. if started                       4. if ended                       5. swapped amount of the query address                       5. exchanged amount of each token*"
      },
      "destruct(bytes32)": {
        "notice": "destruct() destructs the given pool given the pool id id                    swap pool id this function can only be called by the pool creator. after validation, it transfers all the remaining token  (if any) and all the swapped tokens to the pool creator. it will then destruct the pool by reseting almost  all the variables to zero to get the gas refund. note that this function may not work if a pool needs to transfer over ~200 tokens back to the address due to  the block gas limit. we have another function withdraw() to help the pool creator to withdraw a single token *"
      },
      "withdraw(bytes32,uint256)": {
        "notice": "withdraw() transfers out a single token after a pool is expired or empty  id                    swap pool id addr_i                withdraw token index this function can only be called by the pool creator. after validation, it transfers the addr_i th token  out to the pool creator address.*"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1945,
        "contract": "contracts/ito.sol:HappyTokenPool",
        "label": "nonce",
        "offset": 0,
        "slot": "0",
        "type": "t_uint32"
      },
      {
        "astId": 1947,
        "contract": "contracts/ito.sol:HappyTokenPool",
        "label": "base_time",
        "offset": 4,
        "slot": "0",
        "type": "t_uint224"
      },
      {
        "astId": 1952,
        "contract": "contracts/ito.sol:HappyTokenPool",
        "label": "pool_by_id",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(Pool)1871_storage)"
      },
      {
        "astId": 1957,
        "contract": "contracts/ito.sol:HappyTokenPool",
        "label": "seed",
        "offset": 0,
        "slot": "2",
        "type": "t_bytes32"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint128)dyn_storage": {
        "base": "t_uint128",
        "encoding": "dynamic_array",
        "label": "uint128[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(Pool)1871_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct HappyTokenPool.Pool)",
        "numberOfBytes": "32",
        "value": "t_struct(Pool)1871_storage"
      },
      "t_struct(Packed1)1832_storage": {
        "encoding": "inplace",
        "label": "struct HappyTokenPool.Packed1",
        "members": [
          {
            "astId": 1829,
            "contract": "contracts/ito.sol:HappyTokenPool",
            "label": "qualification_addr",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1831,
            "contract": "contracts/ito.sol:HappyTokenPool",
            "label": "password",
            "offset": 20,
            "slot": "0",
            "type": "t_uint40"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Packed2)1837_storage": {
        "encoding": "inplace",
        "label": "struct HappyTokenPool.Packed2",
        "members": [
          {
            "astId": 1834,
            "contract": "contracts/ito.sol:HappyTokenPool",
            "label": "total_tokens",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 1836,
            "contract": "contracts/ito.sol:HappyTokenPool",
            "label": "limit",
            "offset": 16,
            "slot": "0",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Packed3)1846_storage": {
        "encoding": "inplace",
        "label": "struct HappyTokenPool.Packed3",
        "members": [
          {
            "astId": 1839,
            "contract": "contracts/ito.sol:HappyTokenPool",
            "label": "token_address",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1841,
            "contract": "contracts/ito.sol:HappyTokenPool",
            "label": "start_time",
            "offset": 20,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 1843,
            "contract": "contracts/ito.sol:HappyTokenPool",
            "label": "end_time",
            "offset": 24,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 1845,
            "contract": "contracts/ito.sol:HappyTokenPool",
            "label": "unlock_time",
            "offset": 28,
            "slot": "0",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Pool)1871_storage": {
        "encoding": "inplace",
        "label": "struct HappyTokenPool.Pool",
        "members": [
          {
            "astId": 1849,
            "contract": "contracts/ito.sol:HappyTokenPool",
            "label": "packed1",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Packed1)1832_storage"
          },
          {
            "astId": 1852,
            "contract": "contracts/ito.sol:HappyTokenPool",
            "label": "packed2",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(Packed2)1837_storage"
          },
          {
            "astId": 1855,
            "contract": "contracts/ito.sol:HappyTokenPool",
            "label": "packed3",
            "offset": 0,
            "slot": "2",
            "type": "t_struct(Packed3)1846_storage"
          },
          {
            "astId": 1857,
            "contract": "contracts/ito.sol:HappyTokenPool",
            "label": "creator",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 1860,
            "contract": "contracts/ito.sol:HappyTokenPool",
            "label": "exchange_addrs",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 1863,
            "contract": "contracts/ito.sol:HappyTokenPool",
            "label": "exchanged_tokens",
            "offset": 0,
            "slot": "5",
            "type": "t_array(t_uint128)dyn_storage"
          },
          {
            "astId": 1866,
            "contract": "contracts/ito.sol:HappyTokenPool",
            "label": "ratios",
            "offset": 0,
            "slot": "6",
            "type": "t_array(t_uint128)dyn_storage"
          },
          {
            "astId": 1870,
            "contract": "contracts/ito.sol:HappyTokenPool",
            "label": "swapped_map",
            "offset": 0,
            "slot": "7",
            "type": "t_mapping(t_address,t_uint256)"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint224": {
        "encoding": "inplace",
        "label": "uint224",
        "numberOfBytes": "28"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint40": {
        "encoding": "inplace",
        "label": "uint40",
        "numberOfBytes": "5"
      }
    }
  }
}