{
  "address": "0x77ffa59414593Eb33e9F8e78549dc7185302c8D9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_start_time",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "qualified",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "Qualification",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "get_creation_time",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "get_name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "get_start_time",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "ifQualified",
      "outputs": [
        {
          "internalType": "bool",
          "name": "qualified",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "ito_start_time",
          "type": "uint256"
        }
      ],
      "name": "logQualified",
      "outputs": [
        {
          "internalType": "bool",
          "name": "qualified",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_start_time",
          "type": "uint256"
        }
      ],
      "name": "set_start_time",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0xb050da0e566cc8e4320bc82ac5c56d82e783d151d5d858e0fafa0db19cf343eb",
  "receipt": {
    "to": null,
    "from": "0x9972D940c9a23F84Fcf92867d18F28D75D010e5e",
    "contractAddress": "0x77ffa59414593Eb33e9F8e78549dc7185302c8D9",
    "transactionIndex": 4,
    "gasUsed": "393736",
    "logsBloom": "0x
    "blockHash": "0xce09012e7301ea8e7482faa2d781634daa1cd73ad3f5bcc7cb707e1ea7c566af",
    "transactionHash": "0xb050da0e566cc8e4320bc82ac5c56d82e783d151d5d858e0fafa0db19cf343eb",
    "logs": [],
    "blockNumber": 10456255,
    "cumulativeGasUsed": "817950",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "ITO_QLF",
    0
  ],
  "solcInputHash": "da1f8039c285626a507627032e7fab01",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_start_time\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"qualified\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Qualification\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"get_creation_time\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"get_name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"get_start_time\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ifQualified\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"qualified\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ito_start_time\",\"type\":\"uint256\"}],\"name\":\"logQualified\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"qualified\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_start_time\",\"type\":\"uint256\"}],\"name\":\"set_start_time\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"logQualified(address,uint256)\":{\"details\":\"Logs if the given address is qualified, implemented on demand.\"},\"supportsInterface(bytes4)\":{\"details\":\"Ensure that custom contract implements `ifQualified` amd `logQualified` correctly.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/qualification.sol\":\"QLF\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/IQLF.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/**\\n * @author          Yisi Liu\\n * @contact         yisiliu@gmail.com\\n * @author_time     01/06/2021\\n**/\\n\\npragma solidity >= 0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\nabstract contract IQLF is IERC165 {\\n    /**\\n     * @dev Returns if the given address is qualified, implemented on demand.\\n     */\\n    function ifQualified (address account) virtual external view returns (bool);\\n\\n    /**\\n     * @dev Logs if the given address is qualified, implemented on demand.\\n     */\\n    function logQualified (address account, uint256 ito_start_time) virtual external returns (bool);\\n\\n    /**\\n     * @dev Ensure that custom contract implements `ifQualified` amd `logQualified` correctly.\\n     */\\n    function supportsInterface(bytes4 interfaceId) virtual external override pure returns (bool) {\\n        return interfaceId == this.supportsInterface.selector || \\n            interfaceId == (this.ifQualified.selector ^ this.logQualified.selector);\\n    }\\n\\n    /**\\n     * @dev Emit when `ifQualified` is called to decide if the given `address`\\n     * is `qualified` according to the preset rule by the contract creator and \\n     * the current block `number` and the current block `timestamp`.\\n     */\\n    event Qualification(address account, bool qualified, uint256 blockNumber, uint256 timestamp);\\n}\\n\",\"keccak256\":\"0xb6babcf507e5ead7b3ea134feb08b52c2b5be92782c9e97b798ef144a7e9e26c\",\"license\":\"MIT\"},\"contracts/qualification.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/**\\n * @author          Yisi Liu\\n * @contact         yisiliu@gmail.com\\n * @author_time     01/06/2021\\n**/\\n\\npragma solidity >= 0.8.0;\\n\\nimport \\\"./IQLF.sol\\\";\\n\\ncontract QLF is IQLF {\\n    string private name;\\n    uint256 private creation_time;\\n    uint256 start_time;\\n    address creator;\\n    mapping(address => bool) black_list;\\n\\n    modifier creatorOnly {\\n        require(msg.sender == creator, \\\"Not Authorized\\\");\\n        _;\\n    }\\n\\n    constructor (string memory _name, uint256 _start_time) {\\n        name = _name;\\n        creation_time = block.timestamp;\\n        start_time = _start_time;\\n        creator = msg.sender;\\n    }\\n\\n    function get_name() public view returns (string memory) {\\n        return name;\\n    }\\n\\n    function get_creation_time() public view returns (uint256) {\\n        return creation_time;\\n    }\\n\\n    function get_start_time() public view returns (uint256) {\\n        return start_time;\\n    }\\n\\n    function set_start_time(uint256 _start_time) public creatorOnly {\\n        start_time = _start_time;\\n    }\\n\\n    function ifQualified(address) public pure override returns (bool qualified) {\\n        qualified = true;\\n    } \\n\\n    function logQualified(address account, uint256 ito_start_time) public override returns (bool qualified) {\\n        if (start_time > block.timestamp || ito_start_time > block.timestamp) {\\n            black_list[account] = true;\\n            return false;\\n        }\\n        if (black_list[account]) {\\n            return false;\\n        }\\n        emit Qualification(account, true, block.number, block.timestamp);\\n        return true;\\n    } \\n\\n    function supportsInterface(bytes4 interfaceId) external override pure returns (bool) {\\n        return interfaceId == this.supportsInterface.selector || \\n            interfaceId == (this.ifQualified.selector ^ this.logQualified.selector) ||\\n            interfaceId == this.get_start_time.selector;\\n    }    \\n}\\n\",\"keccak256\":\"0x48880f9e40b32469322a335b8599d514abd52800e7cec16623be84a346ac7a5f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506040516106e43803806106e483398101604081905261002f916100fb565b8151610042906000906020850190610062565b504260015560025550600380546001600160a01b03191633179055610216565b82805461006e906101c5565b90600052602060002090601f01602090048101928261009057600085556100d6565b82601f106100a957805160ff19168380011785556100d6565b828001600101855582156100d6579182015b828111156100d65782518255916020019190600101906100bb565b506100e29291506100e6565b5090565b5b808211156100e257600081556001016100e7565b6000806040838503121561010d578182fd5b82516001600160401b0380821115610123578384fd5b818501915085601f830112610136578384fd5b81518181111561014857610148610200565b6040516020601f8301601f191682018101848111838210171561016d5761016d610200565b6040528282528483018101891015610183578687fd5b8693505b828410156101a45784840181015182850182015292830192610187565b828411156101b457868184840101525b969096015195979596505050505050565b6002810460018216806101d957607f821691505b602082108114156101fa57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b6104bf806102256000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063823b69f71161005b578063823b69f7146100d3578063a851c7ff146100e6578063b27b1a6d146100fb578063df29dfc4146101105761007d565b806301ffc9a7146100825780633a525c29146100ab57806379380372146100c0575b600080fd5b610095610090366004610359565b610118565b6040516100a291906103bf565b60405180910390f35b6100b361016c565b6040516100a291906103ca565b6100956100ce366004610330565b6101fe565b6100956100e136600461030f565b6102ae565b6100ee6102b4565b6040516100a29190610445565b61010e610109366004610381565b6102ba565b005b6100ee6102f2565b60006001600160e01b031982166301ffc9a760e01b148061014957506001600160e01b0319821663fb036a8560e01b145b8061016457506001600160e01b031982166337ca77f160e21b145b90505b919050565b60606000805461017b9061044e565b80601f01602080910402602001604051908101604052809291908181526020018280546101a79061044e565b80156101f45780601f106101c9576101008083540402835291602001916101f4565b820191906000526020600020905b8154815290600101906020018083116101d757829003601f168201915b5050505050905090565b600042600254118061020f57504282115b1561023d57506001600160a01b0382166000908152600460205260408120805460ff191660011790556102a8565b6001600160a01b03831660009081526004602052604090205460ff1615610266575060006102a8565b7fb6948b8fb946de1d52ce1ef206f0d910504221f2f0d13f3307aa788ad2d7e3e6836001434260405161029c9493929190610399565b60405180910390a15060015b92915050565b50600190565b60015490565b6003546001600160a01b031633146102ed5760405162461bcd60e51b81526004016102e49061041d565b60405180910390fd5b600255565b60025490565b80356001600160a01b038116811461016757600080fd5b600060208284031215610320578081fd5b610329826102f8565b9392505050565b60008060408385031215610342578081fd5b61034b836102f8565b946020939093013593505050565b60006020828403121561036a578081fd5b81356001600160e01b031981168114610329578182fd5b600060208284031215610392578081fd5b5035919050565b6001600160a01b0394909416845291151560208401526040830152606082015260800190565b901515815260200190565b6000602080835283518082850152825b818110156103f6578581018301518582016040015282016103da565b818111156104075783604083870101525b50601f01601f1916929092016040019392505050565b6020808252600e908201526d139bdd08105d5d1a1bdc9a5e995960921b604082015260600190565b90815260200190565b60028104600182168061046257607f821691505b6020821081141561048357634e487b7160e01b600052602260045260246000fd5b5091905056fea26469706673582212208f9dd696b894b5cf30896b6f9f2356469598ea4201b9f8e2a345eb48ca538d8464736f6c63430008000033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c8063823b69f71161005b578063823b69f7146100d3578063a851c7ff146100e6578063b27b1a6d146100fb578063df29dfc4146101105761007d565b806301ffc9a7146100825780633a525c29146100ab57806379380372146100c0575b600080fd5b610095610090366004610359565b610118565b6040516100a291906103bf565b60405180910390f35b6100b361016c565b6040516100a291906103ca565b6100956100ce366004610330565b6101fe565b6100956100e136600461030f565b6102ae565b6100ee6102b4565b6040516100a29190610445565b61010e610109366004610381565b6102ba565b005b6100ee6102f2565b60006001600160e01b031982166301ffc9a760e01b148061014957506001600160e01b0319821663fb036a8560e01b145b8061016457506001600160e01b031982166337ca77f160e21b145b90505b919050565b60606000805461017b9061044e565b80601f01602080910402602001604051908101604052809291908181526020018280546101a79061044e565b80156101f45780601f106101c9576101008083540402835291602001916101f4565b820191906000526020600020905b8154815290600101906020018083116101d757829003601f168201915b5050505050905090565b600042600254118061020f57504282115b1561023d57506001600160a01b0382166000908152600460205260408120805460ff191660011790556102a8565b6001600160a01b03831660009081526004602052604090205460ff1615610266575060006102a8565b7fb6948b8fb946de1d52ce1ef206f0d910504221f2f0d13f3307aa788ad2d7e3e6836001434260405161029c9493929190610399565b60405180910390a15060015b92915050565b50600190565b60015490565b6003546001600160a01b031633146102ed5760405162461bcd60e51b81526004016102e49061041d565b60405180910390fd5b600255565b60025490565b80356001600160a01b038116811461016757600080fd5b600060208284031215610320578081fd5b610329826102f8565b9392505050565b60008060408385031215610342578081fd5b61034b836102f8565b946020939093013593505050565b60006020828403121561036a578081fd5b81356001600160e01b031981168114610329578182fd5b600060208284031215610392578081fd5b5035919050565b6001600160a01b0394909416845291151560208401526040830152606082015260800190565b901515815260200190565b6000602080835283518082850152825b818110156103f6578581018301518582016040015282016103da565b818111156104075783604083870101525b50601f01601f1916929092016040019392505050565b6020808252600e908201526d139bdd08105d5d1a1bdc9a5e995960921b604082015260600190565b90815260200190565b60028104600182168061046257607f821691505b6020821081141561048357634e487b7160e01b600052602260045260246000fd5b5091905056fea26469706673582212208f9dd696b894b5cf30896b6f9f2356469598ea4201b9f8e2a345eb48ca538d8464736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "logQualified(address,uint256)": {
        "details": "Logs if the given address is qualified, implemented on demand."
      },
      "supportsInterface(bytes4)": {
        "details": "Ensure that custom contract implements `ifQualified` amd `logQualified` correctly."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3172,
        "contract": "contracts/qualification.sol:QLF",
        "label": "name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 3174,
        "contract": "contracts/qualification.sol:QLF",
        "label": "creation_time",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 3176,
        "contract": "contracts/qualification.sol:QLF",
        "label": "start_time",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 3178,
        "contract": "contracts/qualification.sol:QLF",
        "label": "creator",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 3182,
        "contract": "contracts/qualification.sol:QLF",
        "label": "black_list",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}